{
  "metadata": {
    "source_file": "C:\\Users\\mattia.rocchi2\\Desktop\\Analisi-LLM\\Risposte LLM\\response_Chatgpt.yaml",
    "execution_timestamp": "2025-10-17T09:33:22.968313",
    "database": "test_postgres_graphs",
    "host": "137.204.70.156",
    "total_queries": 9
  },
  "queries": [
    {
      "query_id": "Q1",
      "status": "success",
      "execution_time_seconds": 0.004526,
      "row_count": 0,
      "columns": [
        "farm_name",
        "parcels"
      ],
      "results": [],
      "description": "Elenca tutte le parcelle (AgriParcel) appartenenti alla farm ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (f:AgriFarm {name:'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})-[:HAS_AGRIPARCEL]->(p:AgriParcel)\n  RETURN f.name AS farm_name, collect(p.name) AS parcels\n$$) AS (farm_name text, parcels agtype);"
    },
    {
      "query_id": "Q2",
      "status": "success",
      "execution_time_seconds": 0.001611,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "crop_type",
        "irrigation_system"
      ],
      "results": [],
      "description": "Mostra per ogni AgriParcel il tipo di coltura e il sistema di irrigazione.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (p:AgriParcel)-[:BELONGS_TO]->(f:AgriFarm {name:'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})\n  RETURN p.name AS parcel_name, p.colture AS crop_type, p.irrigationSystemType AS irrigation_system\n$$) AS (parcel_name text, crop_type text, irrigation_system text);"
    },
    {
      "query_id": "Q3",
      "status": "success",
      "execution_time_seconds": 0.001682,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "devices"
      ],
      "results": [],
      "description": "Trova tutti i dispositivi (Device) associati alle parcelle della farm.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (f:AgriFarm {name:'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})-[:HAS_AGRIPARCEL]->(p:AgriParcel)-[:HAS_DEVICE]->(d:Device)\n  RETURN p.name AS parcel_name, collect(d.name) AS devices\n$$) AS (parcel_name text, devices agtype);"
    },
    {
      "query_id": "Q4",
      "status": "success",
      "execution_time_seconds": 0.001136,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "dripper_device",
        "position"
      ],
      "results": [],
      "description": "Estrai tutti i sensori di tipo dripper e la parcella a cui appartengono.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (d:Device)-[:BELONGS_TO]->(p:AgriParcel)-[:BELONGS_TO]->(f:AgriFarm {name:'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})\n  WHERE 'dripper' IN d.controlledProperty\n  RETURN p.name AS parcel_name, d.name AS dripper_device, d.location AS position\n$$) AS (parcel_name text, dripper_device text, position text);"
    },
    {
      "query_id": "Q5",
      "status": "success",
      "execution_time_seconds": 0.001204,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "soil_sensors"
      ],
      "results": [],
      "description": "Recupera la lista di sensori soilMoisture per ogni parcella e i relativi valori.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (p:AgriParcel)-[:HAS_DEVICE]->(grid:Device)-[:HAS_DEVICE]->(d:Device)\n  WHERE 'soilMoisture' IN d.controlledProperty\n  RETURN p.name AS parcel_name, collect({sensor:d.name, value:d.value}) AS soil_sensors\n$$) AS (parcel_name text, soil_sensors agtype);"
    },
    {
      "query_id": "Q6",
      "status": "success",
      "execution_time_seconds": 0.001143,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "avg_soil_moisture"
      ],
      "results": [],
      "description": "Calcola il valore medio dell'umiditÃ  del suolo per ciascuna parcella.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (p:AgriParcel)-[:HAS_DEVICE]->(grid:Device)-[:HAS_DEVICE]->(d:Device)\n  WHERE 'soilMoisture' IN d.controlledProperty AND d.value[0] > -1000\n  RETURN p.name AS parcel_name, avg(d.value[0]) AS avg_soil_moisture\n$$) AS (parcel_name text, avg_soil_moisture float8);"
    },
    {
      "query_id": "Q7",
      "status": "success",
      "execution_time_seconds": 0.000915,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "geometry"
      ],
      "results": [],
      "description": "Mostra la posizione geografica (POLYGON) di ogni parcella.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (p:AgriParcel)-[:BELONGS_TO]->(f:AgriFarm {name:'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})\n  RETURN p.name AS parcel_name, p.location AS geometry\n$$) AS (parcel_name text, geometry text);"
    },
    {
      "query_id": "Q8",
      "status": "success",
      "execution_time_seconds": 0.000947,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "sensor_name",
        "value"
      ],
      "results": [],
      "description": "Recupera i dispositivi che hanno valori anomali (value < -1000) e la parcella di appartenenza.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (p:AgriParcel)-[:HAS_DEVICE]->(grid:Device)-[:HAS_DEVICE]->(d:Device)\n  WHERE d.value[0] < -1000\n  RETURN p.name AS parcel_name, d.name AS sensor_name, d.value[0] AS value\n$$) AS (parcel_name text, sensor_name text, value float8);"
    },
    {
      "query_id": "Q9",
      "status": "success",
      "execution_time_seconds": 0.001093,
      "row_count": 0,
      "columns": [
        "parcel_name",
        "num_sensors"
      ],
      "results": [],
      "description": "Conta quanti sensori totali di soilMoisture sono installati per ogni parcella.",
      "reasoning": "",
      "query_text": "SELECT * FROM cypher('agri_graph', $$\n  MATCH (p:AgriParcel)-[:HAS_DEVICE]->(grid:Device)-[:HAS_DEVICE]->(d:Device)\n  WHERE 'soilMoisture' IN d.controlledProperty\n  RETURN p.name AS parcel_name, count(d) AS num_sensors\n$$) AS (parcel_name text, num_sensors int);"
    }
  ]
}