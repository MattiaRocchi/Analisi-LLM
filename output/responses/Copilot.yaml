responses:
  - id: Q1
    query: |
      SELECT COUNT(*) AS num_parcels FROM cypher('agri_graph', $$
        MATCH (farm:AgriFarm {name: 'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})-[:hasDevice]->(parcel:AgriParcel)
        RETURN count(parcel) AS num_parcels
      $$) AS (num_parcels agtype);

  - id: Q2
    query: |
      SELECT device_id FROM cypher('agri_graph', $$
        MATCH (parcel:AgriParcel {name: 'Fondo Errano 2024 T0'})-[:hasDevice]->(device:Device)
        RETURN device.id AS device_id
      $$) AS (device_id agtype);

  - id: Q3
    query: |
      SELECT device_id, device_name FROM cypher('agri_graph', $$
        MATCH (d:Device)
        WHERE 'soilMoisture' IN d.controlledProperty
        RETURN d.id AS device_id, d.name AS device_name
      $$) AS (device_id agtype, device_name agtype);

  - id: Q4
    query: |
      SELECT device_id, device_name FROM cypher('agri_graph', $$
        MATCH (farm:AgriFarm {name: 'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})-[:hasDevice*]->(d:Device)
        WHERE 'soilMoisture' IN d.controlledProperty
        RETURN d.id AS device_id, d.name AS device_name
      $$) AS (device_id agtype, device_name agtype);

  - id: Q5
    query: |
      SELECT parcel_id, parcel_name, colture FROM cypher('agri_graph', $$
        MATCH (farm:AgriFarm)-[:hasDevice]->(parcel:AgriParcel)
        WHERE parcel.colture CONTAINS 'Kiwi'
        RETURN parcel.id AS parcel_id, parcel.name AS parcel_name, parcel.colture AS colture
      $$) AS (parcel_id agtype, parcel_name agtype, colture agtype);

  - id: Q6
    query: |
      SELECT device_id, device_name FROM cypher('agri_graph', $$
        MATCH (parcel:AgriParcel)-[:hasDevice]->(device:Device)
        WHERE parcel.name CONTAINS 'T1' AND 'dripper' IN device.controlledProperty
        RETURN device.id AS device_id, device.name AS device_name
      $$) AS (device_id agtype, device_name agtype);

  - id: Q7
    query: |
      SELECT device_id, device_name, min_value FROM cypher('agri_graph', $$
        MATCH (d:Device)
        WHERE 'soilMoisture' IN d.controlledProperty AND d.value IS NOT NULL
        WITH d, d.value[0] AS moisture_value
        WHERE moisture_value <> -2500
        RETURN d.id AS device_id, d.name AS device_name, moisture_value AS min_value
        ORDER BY moisture_value ASC
        LIMIT 1
      $$) AS (device_id agtype, device_name agtype, min_value agtype);

  - id: Q8
    query: |
      SELECT device_id, device_name, location, distance FROM cypher('agri_graph', $$
        MATCH (d:Device)
        WHERE d.location IS NOT NULL
        WITH d, 
             CASE 
               WHEN d.location STARTS WITH 'POINT' THEN
                 sqrt(
                   pow((toFloat(split(split(d.location, '(')[1], ' ')[0]) - 11.799), 2) +
                   pow((toFloat(split(split(split(d.location, ' ')[1], ')')[0], ' ')[0]) - 44.235), 2)
                 )
             END AS distance
        WHERE distance IS NOT NULL
        RETURN d.id AS device_id, d.name AS device_name, d.location AS location, distance
        ORDER BY distance ASC
        LIMIT 1
      $$) AS (device_id agtype, device_name agtype, location agtype, distance agtype);

  - id: Q9
    query: |
      SELECT parcel_name, device_count FROM cypher('agri_graph', $$
        MATCH (parcel:AgriParcel)-[:hasDevice]->(device:Device)
        WITH parcel.name AS parcel_name, count(device) AS device_count
        RETURN parcel_name, device_count
        ORDER BY device_count DESC
        LIMIT 1
      $$) AS (parcel_name agtype, device_count agtype);