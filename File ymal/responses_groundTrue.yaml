responses_results:
  - query_id: Q1
    query_sql_cypher: |
        SELECT COUNT(*) AS num_parcels FROM cypher('agri_graph', $$
          MATCH (farm:AgriFarm {name: 'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})
          MATCH (parcel:AgriParcel)-[:belongsTo]->(farm)
          RETURN parcel
        $$) AS (parcel agtype);

  - query_id: Q2
    query_sql_cypher: |
        SELECT device_id FROM cypher('agri_graph', $$
          MATCH (parcel:AgriParcel {name: 'Fondo Errano 2024 T0'})
          MATCH (device:Device)-[:belongsTo]->(parcel)
          RETURN device.id
        $$) AS (device_id text);

  - query_id: Q3
    query_sql_cypher: |
        SELECT device_id, device_name FROM cypher('agri_graph', $$
          MATCH (device:Device)
          WHERE 'soilMoisture' IN device.controlledProperty AND device.name STARTS WITH 'Ges v'
          RETURN device.id AS device_id, device.name AS device_name
        $$) AS (device_id text, device_name text);

  - query_id: Q4
    query_sql_cypher: |
        SELECT * FROM cypher('agri_graph', $$
          MATCH (f:AgriFarm {name: 'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})<-[:belongsTo]-(p:AgriParcel)<-[:belongsTo]-(d_grid:Device)-[:hasDevice]->(d:Device)
          WHERE 'soilMoisture' IN d.controlledProperty
          RETURN d.id as device_id, d.name as device_name, p.name as parcel_name
        $$) as (device_id agtype, device_name agtype, parcel_name agtype);

  - query_id: Q5
    query_sql_cypher: |
        SELECT parcel_name, colture FROM cypher('agri_graph', $$
          MATCH (farm:AgriFarm {name: 'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'})
          MATCH (parcel:AgriParcel)-[:belongsTo]->(farm)
          WHERE parcel.colture = 'Kiwi G3'
          RETURN parcel.name AS parcel_name, parcel.colture AS colture
        $$) AS (parcel_name text, colture text);

  - query_id: Q6
    query_sql_cypher: |
        SELECT device_id, device_name FROM cypher('agri_graph', $$
          MATCH (parcel:AgriParcel {name: 'Fondo Errano 2024 T1'})
          MATCH (device:Device)-[:belongsTo]->(parcel)
          WHERE 'dripper' IN device.controlledProperty
          RETURN device.id AS device_id, device.name AS device_name
        $$) AS (device_id text, device_name text);

  - query_id: Q7
    query_sql_cypher: |
        SELECT device_name, value FROM cypher('agri_graph', $$
          MATCH (sensor:Device)
          WHERE 'soilMoisture' IN sensor.controlledProperty
            AND sensor.name STARTS WITH 'Ges v'
            AND sensor.value IS NOT NULL
            AND sensor.value[0] <> -2500
          WITH sensor, toFloat(sensor.value[0]) AS numeric_value
          WHERE numeric_value IS NOT NULL
          RETURN sensor.name AS device_name, numeric_value AS value
          ORDER BY numeric_value ASC LIMIT 1
        $$) AS (device_name text, value float);

  - query_id: Q8
    query_sql_cypher: |
        SELECT device_name, location FROM cypher('agri_graph', $$
          MATCH (device:Device)
          WHERE device.location IS NOT NULL AND device.location STARTS WITH 'POINT'
          WITH device, split(replace(replace(device.location, 'POINT (', ''), ')', ''), ' ') as coords
          WITH device, toFloat(coords[0]) as lon, toFloat(coords[1]) as lat
          WITH device, lon, lat, sqrt((lon - 11.799)^2 + (lat - 44.235)^2) AS distance
          RETURN device.name AS device_name, device.location AS location
          ORDER BY distance ASC LIMIT 1
        $$) AS (device_name text, location text);

  - query_id: Q9
    query_sql_cypher: |
        SELECT parcel_name, total_devices
        FROM cypher('agri_graph', $$
          MATCH (parcel:AgriParcel)-[:belongsTo]->(farm:AgriFarm)
          WHERE farm.name = 'ZESPRI AZ. AGR. DALLE FABBRICHE ANDREA'
          OPTIONAL MATCH (parcel)<-[:belongsTo]-(direct_device:Device)
          OPTIONAL MATCH (parcel)<-[:belongsTo]-(grid:Device)-[:hasDevice]->(grid_device:Device)
          WITH parcel.name AS parcel_name,
               COUNT(DISTINCT direct_device) + COUNT(DISTINCT grid_device) AS total_devices
          RETURN parcel_name, total_devices
          ORDER BY total_devices DESC LIMIT 1
        $$) AS (parcel_name agtype, total_devices agtype);
